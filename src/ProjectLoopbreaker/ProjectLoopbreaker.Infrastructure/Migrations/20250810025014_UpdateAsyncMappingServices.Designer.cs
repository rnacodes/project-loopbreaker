// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectLoopbreaker.Infrastructure.Data;

#nullable disable

namespace ProjectLoopbreaker.Infrastructure.Migrations
{
    [DbContext(typeof(MediaLibraryDbContext))]
    [Migration("20250810025014_UpdateAsyncMappingServices")]
    partial class UpdateAsyncMappingServices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaItemGenres", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaItemId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MediaItemGenres", (string)null);
                });

            modelBuilder.Entity("MediaItemTopics", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaItemId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("MediaItemTopics", (string)null);
                });

            modelBuilder.Entity("MixlistMediaItems", b =>
                {
                    b.Property<Guid>("MixlistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.HasKey("MixlistId", "MediaItemId");

                    b.HasIndex("MediaItemId");

                    b.ToTable("MixlistMediaItems", (string)null);
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Link")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OwnershipStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Rating")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelatedNotes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("MediaItems", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Mixlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.ToTable("Mixlists");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Podcast", b =>
                {
                    b.HasBaseType("ProjectLoopbreaker.Domain.Entities.BaseMediaItem");

                    b.Property<string>("AudioLink")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("DurationInSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentPodcastId")
                        .HasColumnType("uuid");

                    b.Property<string>("PodcastType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ExternalId");

                    b.HasIndex("ParentPodcastId");

                    b.HasIndex("PodcastType");

                    b.ToTable("Podcasts", (string)null);
                });

            modelBuilder.Entity("MediaItemGenres", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaItemTopics", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MixlistMediaItems", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.Mixlist", null)
                        .WithMany()
                        .HasForeignKey("MixlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Podcast", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithOne()
                        .HasForeignKey("ProjectLoopbreaker.Domain.Entities.Podcast", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.Podcast", "ParentPodcast")
                        .WithMany("Episodes")
                        .HasForeignKey("ParentPodcastId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentPodcast");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Podcast", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
