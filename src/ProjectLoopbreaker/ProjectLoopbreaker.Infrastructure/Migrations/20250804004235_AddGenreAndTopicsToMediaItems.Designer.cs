// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectLoopbreaker.Infrastructure.Data;

#nullable disable

namespace ProjectLoopbreaker.Infrastructure.Migrations
{
    [DbContext(typeof(MediaLibraryDbContext))]
    [Migration("20250804004235_AddGenreAndTopicsToMediaItems")]
    partial class AddGenreAndTopicsToMediaItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseMediaItemPlaylist", b =>
                {
                    b.Property<Guid>("MediaItemsId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlaylistsId")
                        .HasColumnType("integer");

                    b.HasKey("MediaItemsId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("MediaItemPlaylists", (string)null);
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Consumed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateConsumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedNotes")
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Topics")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaItems", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.PodcastEpisode", b =>
                {
                    b.HasBaseType("ProjectLoopbreaker.Domain.Entities.BaseMediaItem");

                    b.Property<string>("AudioLink")
                        .HasColumnType("text");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<Guid>("PodcastSeriesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("PodcastSeriesId");

                    b.ToTable("PodcastEpisodes", (string)null);
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.PodcastSeries", b =>
                {
                    b.HasBaseType("ProjectLoopbreaker.Domain.Entities.BaseMediaItem");

                    b.ToTable("PodcastSeries", (string)null);
                });

            modelBuilder.Entity("BaseMediaItemPlaylist", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithMany()
                        .HasForeignKey("MediaItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.PodcastEpisode", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithOne()
                        .HasForeignKey("ProjectLoopbreaker.Domain.Entities.PodcastEpisode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLoopbreaker.Domain.Entities.PodcastSeries", "PodcastSeries")
                        .WithMany("Episodes")
                        .HasForeignKey("PodcastSeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PodcastSeries");
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.PodcastSeries", b =>
                {
                    b.HasOne("ProjectLoopbreaker.Domain.Entities.BaseMediaItem", null)
                        .WithOne()
                        .HasForeignKey("ProjectLoopbreaker.Domain.Entities.PodcastSeries", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLoopbreaker.Domain.Entities.PodcastSeries", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
